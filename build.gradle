plugins {
 id 'java'
 id 'org.springframework.boot' version '3.3.1'
 id 'io.spring.dependency-management' version '1.1.5'
 id 'org.sonarqube' version '3.3'
 id 'jacoco'
}

group = 'com.demo.userregistration'
version = '0.0.1-SNAPSHOT'

java {
 toolchain {
 languageVersion = JavaLanguageVersion.of(17)
 }
}

configurations {
 compileOnly {
 extendsFrom annotationProcessor
 }
}

repositories {
 mavenCentral()
}

dependencies {
 implementation 'org.springframework.boot:spring-boot-starter-actuator'
 implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
 implementation 'org.springframework.boot:spring-boot-starter-web'
 compileOnly 'org.projectlombok:lombok'
 runtimeOnly 'com.h2database:h2'
 annotationProcessor 'org.projectlombok:lombok'
 testImplementation 'org.springframework.boot:spring-boot-starter-test'
 testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    reports {
        junitXml.required.set(true)
        junitXml.outputLocation.set(file("${buildDir}/test-results/test"))
        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/reports/tests"))
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/reports/jacoco/test/html"))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "user-registration-api"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "${project.findProperty('sonarToken') ?: System.getenv('SONAR_TOKEN')}"
    }
}